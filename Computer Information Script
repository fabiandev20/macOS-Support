#!/bin/bash

<<ABOUT_THIS_SCRIPT
-----------------------------------------------------------------------
	Written by:William Smith
	Professional Services Engineer
	Jamf
	bill@talkingmoose.net
	https://github.com/talkingmoose/Jamf-Scripts
	
	Originally posted: August 13, 2018
	Purpose: Display a dialog to end users with computer information when
	run from within Jamf Pro Self Service. Useful for Help Desks to
	ask end users to run when troubleshooting.
	Except where otherwise noted, this work is licensed under
	http://creativecommons.org/licenses/by/4.0/
	"they're good dogs Brent"
INSTRUCTIONS
	1) Edit the "Run Additional Commands" section to choose a behavior
	   for the Enable Remote Support button. This button can do anything
	   you'd like. Three examples are provided:
	   
	   - open an application
	   - run a Jamf Pro policy
	   - email the computer information to your Help Desk
	   
	2) In Jamf Pro choose Settings (cog wheel) > Computer Mangement >
	   Scripts and create a new script. Copy this script in full to the
	   script body and save.
	3) Then choose Computers > Policies and create a new policy. Add
	   the script to the policy and enable it for Self Service.
	4) When an end user calls your Help Desk, the technician can instruct
	   him or her to open Self Service and run the script for trouble-
	   shooting.
	
-----------------------------------------------------------------------
ABOUT_THIS_SCRIPT

## General section #####

# Determine Current Logged in User
currentUser=$(ls -l /dev/console | /usr/bin/awk '{ print $3 }')
loggedinUser="Current User: $currentUser"


#See if Self Service is Branded for the current user so we can use that icon for JAMF Helper
if [ -e "/Users/$currentUser/Library/Application Support/com.jamfsoftware.selfservice.mac/Documents/Images/brandingimage.png" ]
   then
   DisplayIcon="/Users/$currentUser/Library/Application Support/com.jamfsoftware.selfservice.mac/Documents/Images/brandingimage.png"
else
   DisplayIcon="/System/Library/CoreServices/Finder.app/Contents/Resources/Finder.icns"
   fi


# Display computer name
runCommand=$( /usr/sbin/scutil --get ComputerName )
computerName="Computer Name: $runCommand"
runCommand=""


# Display serial number
runCommand=$( /usr/sbin/system_profiler SPHardwareDataType | /usr/bin/grep "Serial Number" | /usr/bin/awk -F ": " '{ print $2 }' )
serialNumber="Serial Number: $runCommand"
runCommand=""


# Display uptime
runCommand=$( /usr/bin/uptime | /usr/bin/awk -F "(up |, [0-9] users)" '{ print $2 }' )
if [[ "$runCommand" = *day* ]] || [[ "$runCommand" = *sec* ]] || [[ "$runCommand" = *min* ]] ; then
	upTime="Uptime: $runCommand"
else
	upTime="Uptime: $runCommand hrs/min"
fi
runCommand=""


## Network section #####


# Display active network services and IP Addresses

networkServices=$( /usr/sbin/networksetup -listallnetworkservices | /usr/bin/grep -v asterisk )

while IFS= read aService
do
	activePort=$( /usr/sbin/networksetup -getinfo "$aService" | /usr/bin/grep "IP address" | /usr/bin/grep -v "IPv6" )
	if [ "$activePort" != "" ] && [ "$activeServices" != "" ]; then
		activeServices="$activeServices\n$aService $activePort"
	elif [ "$activePort" != "" ] && [ "$activeServices" = "" ]; then
		activeServices="$aService $activePort"
	fi
done <<< "$networkServices"

activeServices=$( echo "$activeServices" | /usr/bin/sed '/^$/d')


# Display Wi-Fi SSID
model=$( /usr/sbin/system_profiler SPHardwareDataType | /usr/bin/grep 'Model Name' )

if [[ "$model" = *Book* ]]; then
	runCommand=$( /usr/sbin/networksetup -getairportnetwork en0 | /usr/bin/awk -F ": " '{ print $2 }' )
else
	runCommand=$( /usr/sbin/networksetup -getairportnetwork en1 | /usr/bin/awk -F ": " '{ print $2 }' )
fi

SSID="SSID: $runCommand"
runCommand=""

# Display SSH status
runCommand=$( /usr/sbin/systemsetup -getremotelogin | /usr/bin/awk -F ": " '{ print $2 }' ) 
SSH="SSH: $runCommand"
runCommand=""

# Display date, time and time zone
runCommand=$( /bin/date )
timeInfo="Date and Time: $runCommand"
runCommand=""

# Display network time server
runCommand=$( /usr/sbin/systemsetup -getnetworktimeserver )
timeServer="$runCommand"
runCommand=""

## JAMF section #####

if [ -e /usr/local/bin/jamf ]
   then

   # Display MDM Profile Statius
   runCommand=$( /usr/sbin/system_profiler SPConfigurationProfileDataType | grep -A3 "UUID: 00000000-0000-0000-A000-4A414D460003" | grep "Verification State: " | awk -F ': ' '{ print $2 }' )
   mdmProfile="MDM Profile Status: $runCommand"
   runCommand=""

   # Display the current Jamf Binary Version
   runCommand=$( jamf version | awk -F "=" '{print $2}' )
   jamfVersion="Jamf Version: $runCommand"
   runCommand=""

   # Display the status of the connection to the JSS
   runCommand=$( jamf checkJSSConnection | awk 'NR==2{print $0}' )
   jamfConnection="Jamf Connection Status: $runCommand"
   runCommand=""

else
   mdmProfile=""
   jamfVersion="JAMF Binary not found."
   jamfConnection=""

fi


## Active Directory section #####


# Display Active Directory binding
runCommand=$( /usr/sbin/dsconfigad -show | /usr/bin/grep "Directory Domain" | /usr/bin/awk -F "= " '{ print $2 }' )

if [ "$runCommand" = "INSERT AD DOMAIN" ]; then
	AD="Bound to Active Directory: Yes"
else
	AD="Bound to Active Directory: No"	
fi

if [ "$AD" == "Bound to Active Directory: Yes" ]
then

# Test Active Directory binding
runCommand=""
runCommand=$( /usr/bin/dscl "/Active Directory/INSERT ACTIVE DIRECTORY NET BIOS/All Domains" read /Users )

if [ "$runCommand" = "name: dsRecTypeStandard:Users" ]; then
	testAD="Test Active Directory Connection: Success"
else
	testAD="Test Active Directory Connection: Fail"	
fi
else
	testAD="Not Bound. Skipping Active Directory Check."
fi
runCommand=""

## FileVault section #####

#Encryption Status

osvers_major=$(sw_vers -productVersion | awk -F. '{print $1}')
osvers_minor=$(sw_vers -productVersion | awk -F. '{print $2}')

if [[ ${osvers_major} -eq 10 ]] && [[ ${osvers_minor} -ge 13 ]]; then

# If the OS on the Mac is 10.13 or higher, check to see if the
# boot drive is formatted with APFS or HFS+

boot_filesystem_check=$(/usr/sbin/diskutil info / | awk '/Type \(Bundle\)/ {print $3}')
  
# If the drive is formatted with APFS, the fdesetup tool will
# be available and is able to display the encryption status.

 if [[ "$boot_filesystem_check" = "apfs" ]]; then
      ENCRYPTSTATUS=$(fdesetup status | xargs)
      
      ##If FV Status DOES NOT contrain the Words Encryption or Decryptiom
      if [[ -z $(echo "$ENCRYPTSTATUS" | awk '/Encryption | Decryption/') ]]; then
          ENCRYPTSTATUS=$(fdesetup status | head -1)
          #We change the wording of 10.13 status in the variable so we don't have to addd
          #different terms to the smart computer computer group to check for successful encryption
          #While we don't expect a different wording we throw it in just in case.
          if [[ "$ENCRYPTSTATUS" == "FileVault is On." ]]; then
           FVDisplay="FileVault 2 Encryption Complete"
           else
           FVDisplay="$ENCRYPTSTATUS"
           fi
      else
        ENCRYPTSTATUS=$(fdesetup status | tail -1)
        FVDisplay="$ENCRYPTSTATUS"
      fi
  else
    FVDisplay="Unable to display encryption status for filesystems other than APFS."
  fi
else
	if [[ ${osvers_major} -eq 10 ]] && [[ ${osvers_minor} -lt 7 ]]; then
       FVDisplay="FileVault 2 Encryption Not Available For This Version Of Mac OS X"
    else
       if [[ ${osvers_major} -ne 10 ]]; then
       FVDisplay="Unknown Version Of Mac OS X"
       fi
   fi
fi

#Recovery HD Status
RecoveryHD=$(diskutil list | grep Recovery)

if [ "$RecoveryHD" == "" ]
then
RecoveryDisplay="Recovery Partition: Not Found"
else
RecoveryDisplay="Recovery Partition: Present"
fi

#Secure Token status
SeecureTokenStatus=$(sysadminctl -secureTokenStatus "$currentUser" 2>&1 | awk '{print $7}')
SecureTokenDiplay="Secure Token: $SeecureTokenStatus"


## Hardware/Software section #####


# Display free space
FreeSpace=$( /usr/sbin/diskutil info "Macintosh HD" | /usr/bin/grep  -E 'Free Space|Available Space' | /usr/bin/awk -F ":\s*" '{ print $2 }' | awk -F "(" '{ print $1 }' | xargs )
FreePercentage=$( /usr/sbin/diskutil info "Macintosh HD" | /usr/bin/grep -E 'Free Space|Available Space' | /usr/bin/awk -F "(\\\(|\\\))" '{ print $6 }' )
diskSpace="Disk Space: $FreeSpace free ($FreePercentage available)"


# Display operating system
runCommand=$( /usr/bin/sw_vers -productVersion)
operatingSystem="Operating System: $runCommand"
runCommand=""

# Display battery cycle count
#runCommand=$( /usr/sbin/ioreg -r -c "AppleSmartBattery" | /usr/bin/grep -w "CycleCount" | /usr/bin/awk '{print $3}' | /usr/bin/sed s/\"//g )
runCommand=$( /usr/sbin/ioreg -r -c "AppleSmartBattery" | /usr/bin/grep '"CycleCount" = ' | /usr/bin/awk '{ print $3 }' | /usr/bin/sed s/\"//g )

if [ "$runCommand" == "" ]
then
batteryCycleCount="Battery Not Found."
else
batteryCycleCount="Battery Cycle Count: $runCommand"
fi
runCommand=""

## Format information #####


displayInfo="----------------------------------------------
GENERAL
$computerName
$loggedinUser
$serialNumber
$upTime
----------------------------------------------
NETWORK
$activeServices
$SSID
$SSH
$timeInfo
$timeServer
----------------------------------------------
JAMF
$mdmProfile
$jamfVersion
$jamfConnection
----------------------------------------------
FileVault
$FVDisplay
$RecoveryDisplay
$SecureTokenDiplay
----------------------------------------------
HARDWARE/SOFTWARE
$diskSpace
$operatingSystem
$batteryCycleCount
----------------------------------------------"



## Display information to end user #####


#runCommand="button returned of (display dialog \"$displayInfo\" with title \"Computer Information\" with icon file posix file \"/System/Library/CoreServices/Finder.app/Contents/Resources/Finder.icns\" buttons {\"Enable Remote Support\", \"OK\"} default button {\"OK\"})"
runCommand="button returned of (display dialog \"$displayInfo\" with title \"Computer Information\" with icon file posix file \"$DisplayIcon\" buttons {\"OK\"} default button {\"OK\"})"

clickedButton=$( /usr/bin/osascript -e "$runCommand" )
runCommand=""



## Run additional commands #####


if [ "$clickedButton" = "Enable Remote Support" ]; then

	# open a remote support application
	# /usr/bin/open -a "/Applications/TeamViewer.app"

	# run a policy to enable remote support
	# /usr/local/bin/jamf policy -event EnableRemoteSupport
	
	# email computer information to help desk
	sudo -u "$currentUser" /usr/bin/open "mailto:EMAIL@GOES.HERE?subject=Computer Information ($serialNumber)&body=$displayInfo"
	
	if [ $? = 0 ]; then
		/usr/bin/osascript -e 'display dialog "Remote support enabled." with title "Computer Information" with icon file posix file "/System/Library/CoreServices/Finder.app/Contents/Resources/Finder.icns" buttons {"OK"} default button {"OK"}' &
	else
		/usr/bin/osascript -e 'display dialog "Failed enabling remote support." with title "Computer Information" with icon file posix file "/System/Library/CoreServices/Finder.app/Contents/Resources/Finder.icns" buttons {"OK"} default button {"OK"}' &
	fi

fi

exit 0
